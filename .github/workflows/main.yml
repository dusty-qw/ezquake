name: main

on:
  push:
    # Only build branches on push, tags will be handled by 'release' job.
    branches:
      - '**'
  pull_request:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            configurePreset: msbuild-x64
            buildPreset: msbuild-x64-release
            name: ezQuake-windows-x64
            artifact: "ezquake.exe"
            container: null
          - os: ubuntu-latest
            configurePreset: dynamic
            buildPreset: dynamic-release
            name: ezQuake-linux-x86_64
            artifact: "ezQuake-x86_64.AppImage"
            cflags: "-march=nehalem"
            packages: ["build-essential", "ca-certificates", "cmake", "curl", "file", "git", "libcurl4-openssl-dev", "libexpat1-dev", "libfreetype-dev", "libfuse2", "libjansson-dev", "libjpeg-dev", "libminizip-dev", "libpcre2-dev", "libpng-dev", "libsdl2-2.0-0", "libsdl2-dev", "libsndfile1-dev", "libspeex-dev", "libspeexdsp-dev", "ninja-build", "unzip"]
            container:
              image: debian:testing
              options: --privileged

    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    steps:
    - name: Prepare Linux environment
      run: |
        apt-get -qq update && apt-get -qq install --no-install-recommends ${{ join(matrix.packages, ' ') }}
        git config --global --add safe.directory $PWD
      if: matrix.os == 'ubuntu-latest'

    - name: Check out code
      uses: actions/checkout@v4
      with:
        submodules: true
        # To get correct revision which is needed by server to detect certain client bugs
        fetch-depth: 0

    - name: Fetch upstream tags for version metadata
      run: |
          git remote add upstream https://github.com/QW-Group/ezquake-source.git
          git fetch --tags --no-recurse-submodules upstream
      if: github.repository != 'QW-Group/ezquake-source'

    - name: Set library build type to release
      shell: bash
      run: |
        # Hopefully overrideable via environment in the future. Done here as
        # vcpkg is chainloaded before cmake, and doesn't seem to apply args.
        # Avoids building both -dbg and -rel versions of static libraries.
        for x in {cmake/triplets/*,vcpkg/triplets/{*,community/*}}; do
          if [[ -f $x ]]; then
            echo >> $x
            echo 'set(VCPKG_BUILD_TYPE release)' >> $x
          fi
        done
      if: matrix.os != 'ubuntu-latest'

    - uses: lukka/get-cmake@latest
      with:
        cmakeVersion: "~3.28.0"
      if: matrix.os != 'ubuntu-latest'

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      if: matrix.os != 'ubuntu-latest'

    - name: Run CMake
      uses: lukka/run-cmake@v10
      with:
        configurePreset: ${{ matrix.configurePreset }}
        buildPreset: ${{ matrix.buildPreset }}
      env:
        CFLAGS: ${{ matrix.cflags }}

    - name: Generate Linux AppImage
      run: |
        export EXECUTABLE=$(echo build-${{ matrix.configurePreset }}/Release/ezquake*)
        ./misc/appimage/appimage-manual_creation.sh
        mv ezQuake-x86_64.AppImage build-${{ matrix.configurePreset }}/Release/
      if: matrix.os == 'ubuntu-latest'

    - name: Archive client
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: |
          build-${{ matrix.configurePreset }}/Release/${{ matrix.artifact }}
        compression-level: 9
